// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Linq;
using System.Net;
using System.IO;
using System.Threading.Tasks;

namespace ExternalProviderAuthentication.iOS
{
	public partial class BrowserLoginViewController : UIViewController
	{
		public BrowserLoginViewController (IntPtr handle) : base (handle)
		{
		}

		public ExternalLoginViewModel ExternalLoginProvider {
			get;
			set;
		}

		public AuthenticationServices Services {
			get;
			set;
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			AttemptLogin ();
			_webBrowser.LoadFinished += (sender, e) => {
				Console.WriteLine(_webBrowser.Request.Url);
				ParseUrlForAccessToken(_webBrowser.Request.Url.ToString());
			};
		}
			
		private async void ParseUrlForAccessToken(string url)
		{
			const string fieldName = "access_token=";
			int accessTokenIndex = url.IndexOf(fieldName, StringComparison.Ordinal);
			if (accessTokenIndex > -1) {

				int ampersandTokenIndex = url.IndexOf("&", accessTokenIndex, StringComparison.Ordinal);
				string tokenField = url.Substring (accessTokenIndex, ampersandTokenIndex - accessTokenIndex);
				string token = tokenField.Substring (fieldName.Length);
				Console.WriteLine (token);
				Services.AccessToken = token;
				if (!IsLocalUser)
				{
					await Services.RegisterExternal("ausername"); // collect the username from the UI and put it here
					InvokeOnMainThread(() => AttemptLogin());
				}
				else
				{
					await TestAuthorization ();
				}
			}
		}

		private void AttemptLogin()
		{
			string url = String.Format ("{0}/{1}", Services.BaseUri, ExternalLoginProvider.Url);
			_webBrowser.LoadRequest (NSUrlRequest.FromUrl (new NSUrl (url)));
		}

		private bool IsLocalUser
		{
			get
			{
				NSHttpCookieStorage cookieJar = NSHttpCookieStorage.SharedStorage;
				return cookieJar.Cookies.Any(cookie => cookie.Name == ".AspNet.Cookies");
			}
		}

		private async Task TestAuthorization()
		{
			string uri = String.Format("{0}/api/Values/1", Services.BaseUri);

			HttpWebRequest request = new HttpWebRequest(new Uri(uri));

			request.Headers.Add("Authorization", String.Format("Bearer {0}", Services.AccessToken));
			request.Method = "GET";

			try
			{
				WebResponse response = await request.GetResponseAsync();
				HttpWebResponse httpResponse = (HttpWebResponse)response;
				string result;

				using (Stream responseStream = httpResponse.GetResponseStream())
				{
					result = new StreamReader(responseStream).ReadToEnd();
					Console.WriteLine(result);
					UIAlertView alert = new UIAlertView ("Success", result, null, "OK", null);
					alert.Show ();
				}
			}
			catch (Exception ex)
			{
				UIAlertView alert = new UIAlertView ("Failure", ex.GetType().Name, null, "OK", null);
				alert.Show ();
			}
		}
	}
}
